'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (inputDir, outputDir) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    options = _lodash2.default.defaults({}, options, {
        baseUrl: '/',
        title: 'Component Library',
        overview: 'Overview',
        search: 'Search',
        js: [],
        css: [],
        layout: _path2.default.join(__dirname, 'views/layout.njk'),
        favicon: {
            href: options.baseUrl + 'assets_/assets/favicons/favicon-32x32.png',
            rel: 'icon',
            type: 'image/component-library/favicons/png'
        }
    });

    nunjucksEnv = new _nunjucks2.default.configure([_path2.default.join(__dirname, 'views'), '']).addFilter('template', function (path) {
        return _fs2.default.readFileSync(path).toString();
    }).addFilter('highlight', function (code) {
        return _highlight2.default.highlight('htmlbars', code, true, false).value;
    });

    var patternsTree = (0, _directoryTree2.default)(inputDir);
    patternsTree.name = options.overview;
    refineTree(patternsTree, inputDir);

    return compileTree(patternsTree, outputDir, patternsTree, options);
};

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _directoryTree = require('directory-tree');

var _directoryTree2 = _interopRequireDefault(_directoryTree);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _writefile = require('writefile');

var _writefile2 = _interopRequireDefault(_writefile);

var _nunjucks = require('nunjucks');

var _nunjucks2 = _interopRequireDefault(_nunjucks);

var _highlight = require('highlight.js');

var _highlight2 = _interopRequireDefault(_highlight);

var _cheerio = require('cheerio');

var _cheerio2 = _interopRequireDefault(_cheerio);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var nunjucksEnv = void 0;

function refineTree(item, rootDir) {
    //Remove firsts numbers and extensions
    var prettyName = item.name.replace(/^\d+\./, '').split('.').shift().replace('-', ' ');
    item.name = _lodash2.default.capitalize(prettyName);
    item.relativePath = _path2.default.relative(rootDir, item.path);

    if (item.children) {
        item.relativePath += (item.relativePath ? '/' : '') + 'index.html';
    }

    _lodash2.default.each(item.children, function (child) {
        refineTree(child, rootDir);
    });
}

function compileTree(item, outputDir, tree) {
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    var outputPath = _path2.default.resolve(outputDir, item.relativePath);

    var renderers = [];

    if (item.children) {
        _lodash2.default.each(item.children, function (child) {
            renderers.push(compileTree(child, outputDir, tree, options));
        });
    }

    renderers.push(new Promise(function (resolve, reject) {
        var params = _lodash2.default.extend({}, options, {
            tree: tree,
            current: item
        });

        var navigationHtml = nunjucksEnv.render('navigation.njk', params);
        var contentHtml = nunjucksEnv.render('content.njk', params);
        nunjucksEnv.opts.autoescape = false;
        var layoutHtml = nunjucksEnv.render(options.layout, { content: contentHtml });
        nunjucksEnv.opts.autoescape = true;

        var $ = _cheerio2.default.load(layoutHtml, {
            decodeEntities: false
        });
        var head = $('head');
        var body = $('body');

        head.prepend(nunjucksEnv.render('css.njk', params));

        if (head.find('title').length === 0) {
            head.prepend($('<title></title>').text(options.title));
        }

        _lodash2.default.forEach(options.css, function (cssLink) {
            head.append($('<link rel="stylesheet">').attr('href', cssLink));
        });

        if (head.find('meta[charset]').length === 0) {
            head.prepend('<meta charset="utf-8">');
        }

        if (head.find('link[rel=icon]').length === 0) {
            head.append($('<link />').attr('href', options.favicon.href).attr('rel', options.favicon.rel).attr('type', options.favicon.type));
        }

        body.prepend(navigationHtml);
        body.append(_nunjucks2.default.render('js.njk', params));

        _lodash2.default.forEach(options.js, function (jsLink) {
            body.append($('<script></script>').attr('src', jsLink));
        });

        (0, _writefile2.default)(outputPath, $.html(), function () {
            resolve();
        });
    }));

    return Promise.all(renderers);
}